// <auto-generated />
using System;
using DecorStore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DecorStore.Migrations
{
    [DbContext(typeof(DecorStoreDbContext))]
    [Migration("20240417201022_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DecorStore.Models.Category", b =>
                {
                    b.Property<int>("IdCate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CATE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCate"));

                    b.Property<string>("CateName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CATE_NAME");

                    b.Property<string>("Description")
                        .HasColumnType("ntext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int?>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<string>("Img")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("IMG");

                    b.Property<string>("Link")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("LINK");

                    b.HasKey("IdCate")
                        .HasName("PK__Category__7A169070B143E042");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("DecorStore.Models.Favorite", b =>
                {
                    b.Property<int>("IdFavo")
                        .HasColumnType("int")
                        .HasColumnName("ID_FAVO");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE");

                    b.Property<int>("IdProd")
                        .HasColumnType("int")
                        .HasColumnName("ID_PROD");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_USER");

                    b.HasKey("IdFavo")
                        .HasName("PK__Favorite__6CC98A524F17FB87");

                    b.ToTable("Favorite", (string)null);
                });

            modelBuilder.Entity("DecorStore.Models.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ORDER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrder"));

                    b.Property<string>("Address")
                        .HasColumnType("ntext")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_USER");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("bit")
                        .HasColumnName("IS_COMPLETE");

                    b.Property<bool?>("IsPay")
                        .HasColumnType("bit")
                        .HasColumnName("IS_PAY");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext")
                        .HasColumnName("NOTES");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ORDER_DATE");

                    b.Property<string>("PtThanhtoan")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PT_THANHTOAN");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("TOTAL_PRICE");

                    b.Property<string>("UserCustomId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdOrder")
                        .HasName("PK__Order__D23A856506D6AA6F");

                    b.HasIndex("UserCustomId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("DecorStore.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdOrder")
                        .HasColumnType("int")
                        .HasColumnName("ID_ORDER");

                    b.Property<int>("IdProd")
                        .HasColumnType("int")
                        .HasColumnName("ID_PROD");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("PRICE");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<decimal?>("Sale")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("SALE");

                    b.HasKey("Id")
                        .HasName("PK__OrderDet__3214EC2781B8D563");

                    b.HasIndex("IdOrder");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("DecorStore.Models.Producer", b =>
                {
                    b.Property<int>("IdProducer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PRODUCER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProducer"));

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("EMAIL");

                    b.Property<int?>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<string>("Img")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("IMG");

                    b.Property<string>("PhoneNums")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PHONE_NUMS");

                    b.Property<string>("ProducerName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("PRODUCER_NAME");

                    b.HasKey("IdProducer")
                        .HasName("PK__Producer__88BD7532785392CC");

                    b.ToTable("Producer", (string)null);
                });

            modelBuilder.Entity("DecorStore.Models.Product", b =>
                {
                    b.Property<int>("IdProd")
                        .HasColumnType("int")
                        .HasColumnName("ID_PROD");

                    b.Property<string>("AliasName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ALIAS_NAME");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int?>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<int>("IdCate")
                        .HasColumnType("int")
                        .HasColumnName("ID_CATE");

                    b.Property<int>("IdProducer")
                        .HasColumnType("int")
                        .HasColumnName("ID_PRODUCER");

                    b.Property<string>("Img1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("IMG1");

                    b.Property<string>("Img2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("IMG2");

                    b.Property<string>("Img3")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("IMG3");

                    b.Property<string>("Link")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("LINK");

                    b.Property<DateTime?>("Nsx")
                        .HasColumnType("datetime")
                        .HasColumnName("NSX");

                    b.Property<int?>("Nums")
                        .HasColumnType("int")
                        .HasColumnName("NUMS");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("PRICE");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("PROD_NAME");

                    b.Property<decimal?>("Sale")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("SALE");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UNIT");

                    b.HasKey("IdProd")
                        .HasName("PK__Product__BA497EFEC97E67E7");

                    b.HasIndex("IdCate");

                    b.HasIndex("IdProducer");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("DecorStore.Models.UserCustom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DecorStore.Models.Order", b =>
                {
                    b.HasOne("DecorStore.Models.UserCustom", "UserCustom")
                        .WithMany()
                        .HasForeignKey("UserCustomId");

                    b.Navigation("UserCustom");
                });

            modelBuilder.Entity("DecorStore.Models.OrderDetail", b =>
                {
                    b.HasOne("DecorStore.Models.Order", "IdOrderNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("DecorStore.Models.Product", "IdOrder1")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Product");

                    b.Navigation("IdOrder1");

                    b.Navigation("IdOrderNavigation");
                });

            modelBuilder.Entity("DecorStore.Models.Product", b =>
                {
                    b.HasOne("DecorStore.Models.Category", "IdCateNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdCate")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.HasOne("DecorStore.Models.Producer", "IdProducerNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdProducer")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Producer");

                    b.Navigation("IdCateNavigation");

                    b.Navigation("IdProducerNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DecorStore.Models.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DecorStore.Models.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DecorStore.Models.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DecorStore.Models.UserCustom", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DecorStore.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DecorStore.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DecorStore.Models.Producer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DecorStore.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
